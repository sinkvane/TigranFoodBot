import { REMINDERS, POINTS } from "../reports.js";
import { config } from "../config.js";
import { log } from "./logger.js";
import { userState } from "./state.js";
import cron from "node-cron";

const { TIMEZONE } = config;

// --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–≥–æ–≤ ---
function getUserName(state) {
  if (!state || !state.from) return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
  return state.from.username ? `@${state.from.username}` : state.from.first_name;
}

export function sendPendingReports(bot, chatId) {
  const state = userState[chatId];
  if (!state || !state.pendingReminders || state.pendingReminders.length === 0) return;

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –æ—Ç—á–µ—Ç–æ–º
  if (!state.lastReminder) {
    // –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (state._pendingMessageId) {
      bot.deleteMessage(chatId, state._pendingMessageId).catch(() => {});
      state._pendingMessageId = null;
    }

    // –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä —É–∂–µ –≤–∏—Å–∏—Ç, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–≥–æ
    if (state._sendTimer) clearTimeout(state._sendTimer);

    // –°—Ç–∞–≤–∏–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –Ω–∞ 1.5 —Å–µ–∫—É–Ω–¥—ã
    state._sendTimer = setTimeout(() => {
      const buttons = state.pendingReminders.map(r => {
        const rem = REMINDERS.find(rem => rem.name === r);
        if (!rem) return null;
        return [{ text: r, callback_data: `report:${rem.key}` }];
      }).filter(Boolean);

      if (buttons.length > 0) {
        bot.sendMessage(chatId, "üîî –ü–æ—Å—Ç—É–ø–∏–ª–∏ –Ω–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:", {
          reply_markup: { inline_keyboard: buttons }
        }).then(msg => state._pendingMessageId = msg.message_id);

        const userName = getUserName(state);
        log(`[REMINDERS] –ù–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç—á—ë—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userName}: ${state.pendingReminders.join(", ")}`);
      }

      state._sendTimer = null;
    }, 1500);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å—Ç–∞—Ä—ã—Ö —Å–º–µ–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞.
 * –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–º–µ–Ω—ã, –æ—Ç–∫—Ä—ã—Ç—ã–µ –±–æ–ª–µ–µ 2 —Å—É—Ç–æ–∫.
 */
export function cleanOldShifts(bot) {
  const now = Date.now();

  for (const [chatId, state] of Object.entries(userState)) {
    if (state.startTime && (now - state.startTime) > 2 * 24 * 60 * 60 * 1000) {
      state.pendingReminders = [];
      state.reportBuffer = [];
      state.verified = false;
      state.step = null;
      state.lastReminder = null;
      state._lastMsgId = null;
      state._contentAdded = false;
      state.startTime = null;

      if (state._pendingMessageId) {
        try { 
          bot.deleteMessage(chatId, state._pendingMessageId.toString()).catch(() => {}); 
        } catch (e) {}
      }
      state._pendingMessageId = null;

      const userName = getUserName(state);
      log(`[CLEANUP] –°–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userName} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞ (–±–æ–ª–µ–µ 2 —Å—É—Ç–æ–∫)`);
    }
  }
}

export function scheduleReminders(bot, chatId, pointName) {
  const point = POINTS[pointName];
  if (!point) return;

  const tz = TIMEZONE[point.tz];
  const pointType = point.type;

  REMINDERS.forEach(reminder => {
    if (reminder.pointType && reminder.pointType !== pointType) return;

    const cronKey = `${chatId}_${reminder.key}`;
    if (!userState[cronKey]) {
      userState[cronKey] = true;

      cron.schedule(reminder.cron, () => {
        const state = userState[chatId];
        if (!state || !state.verified) return;

        // ‚úÖ –ê–≤—Ç–æ-–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–º–µ–Ω—ã —á–µ—Ä–µ–∑ 2 —Å—É—Ç–æ–∫ (48 —á–∞—Å–æ–≤)
        if (state.startTime && (Date.now() - state.startTime) > 2 * 24 * 60 * 60 * 1000) {
          state.pendingReminders = [];
          state.reportBuffer = [];
          state.verified = false;
          state.step = null;
          state.lastReminder = null;
          state._lastMsgId = null;
          state._contentAdded = false;
          state.startTime = null;

          if (state._pendingMessageId) {
            try {
              bot.deleteMessage(chatId, state._pendingMessageId.toString()).catch(() => {});
            } catch (e) {}
          }

          state._pendingMessageId = null;
          const userName = getUserName(state);
          log(`[AUTO-END] –°–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userName} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–±–æ–ª–µ–µ 2 —Å—É—Ç–æ–∫)`);
          return;
        }

        if (!state.pendingReminders) state.pendingReminders = [];

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ—Ç—á—ë—Ç –≤ –æ—á–µ—Ä–µ–¥—å, –¥–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–Ω—ã
        state.pendingReminders.push(reminder.name);
        const userName = getUserName(state);
        log(`[CRON] –î–æ–±–∞–≤–ª–µ–Ω –æ—Ç—á—ë—Ç "${reminder.name}" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userName}`);

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –æ—Ç—á–µ—Ç–æ–º, –æ–±–Ω–æ–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (!state.lastReminder) {
          sendPendingReports(bot, chatId);
        }
      }, { timezone: tz });
    }
  });
}