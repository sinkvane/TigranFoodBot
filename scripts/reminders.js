// reminders.js
import cron from "node-cron";
import { REMINDERS, POINTS } from "../reports.js";
import { config } from "../config.js";
import { log } from "./logger.js";
import { userState } from "./state.js";

const { TIMEZONE } = config;

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö pendingReminders –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
export function sendPendingReports(bot, chatId) {
  const state = userState[chatId];
  if (!state || !state.pendingReminders || state.pendingReminders.length === 0) return;

  if (state.pendingReminders.length === 1) {
    const reminder = REMINDERS.find(r => r.name === state.pendingReminders[0]);
    if (reminder) {
      state.lastReminder = reminder.name;
      state.pendingReminders = state.pendingReminders.filter(r => r !== reminder.name);
      bot.sendMessage(
        chatId,
        `üîî –ü–æ—Å—Ç—É–ø–∏–ª –æ—Ç—á–µ—Ç: "${reminder.name}". –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ ¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç—á–µ—Ç¬ª.`
      );
      log(`–û–¥–∏–Ω –æ—Ç—á—ë—Ç "${reminder.name}" —Å—Ä–∞–∑—É –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}`);
    }
    return;
  }

  // –ù–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç—á–µ—Ç–æ–≤ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤—ã–±–æ—Ä
  const buttons = state.pendingReminders
    .map(r => {
      const rem = REMINDERS.find(rem => rem.name === r);
      if (!rem) return null;
      return [{ text: r, callback_data: `report:${rem.key}` }];
    })
    .filter(Boolean);

  if (buttons.length > 0) {
    bot.sendMessage(chatId, "üîî –ü–æ—Å—Ç—É–ø–∏–ª–∏ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ—Ç—á–µ—Ç—ã, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:", {
      reply_markup: { inline_keyboard: buttons }
    });
    log(`–ù–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç—á—ë—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}: ${state.pendingReminders.join(", ")}`);
  }
}

// –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export function scheduleReminders(bot, chatId, pointName) {
  const point = POINTS[pointName];
  if (!point) return;

  const tz = TIMEZONE[point.tz];
  const pointType = point.type;

  REMINDERS.forEach(reminder => {
    if (reminder.pointType && reminder.pointType !== pointType) return;

    cron.schedule(
      reminder.cron,
      () => {
        const state = userState[chatId];
        if (!state || !state.verified) return;

        if (!state.pendingReminders) state.pendingReminders = [];
        if (!state.pendingReminders.includes(reminder.name)) {
          state.pendingReminders.push(reminder.name);
          log(`[CRON] –î–æ–±–∞–≤–ª–µ–Ω –æ—Ç—á—ë—Ç "${reminder.name}" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
          sendPendingReports(bot, chatId);
        }
      },
      { timezone: tz }
    );

    log(`[CRON] –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –æ—Ç—á—ë—Ç "${reminder.name}" –¥–ª—è —Ç–æ—á–∫–∏ "${pointName}"`);
  });
}
