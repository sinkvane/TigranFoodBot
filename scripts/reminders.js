import { REMINDERS, POINTS } from "../reports.js";
import { config } from "../config.js";
import { log } from "./logger.js";
import { userState } from "./state.js";
import cron from "node-cron";

const { TIMEZONE } = config;

export function sendPendingReports(bot, chatId) {
  const state = userState[chatId];
  if (!state || !state.pendingReminders || state.pendingReminders.length === 0) return;

  // --- –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç—á—ë—Ç–∞, –≤—ã–¥–∞—ë–º —Å–ª–µ–¥—É—é—â–∏–π ---
  while (!state.lastReminder && state.pendingReminders.length > 0) {
    const reminderName = state.pendingReminders.shift();
    const reminder = REMINDERS.find(r => r.name === reminderName);
    if (!reminder) continue;

    state.lastReminder = reminder.name;

    // --- –ï—Å–ª–∏ –æ–¥–∏–Ω –æ—Ç—á—ë—Ç, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–µ–∑ –∫–Ω–æ–ø–æ–∫ ---
    if (state.pendingReminders.length === 0) {
      bot.sendMessage(chatId, `üîî –ü–æ—Å—Ç—É–ø–∏–ª –æ—Ç—á–µ—Ç: "${reminder.name}". –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç.`);
      log(`–û–¥–∏–Ω –æ—Ç—á—ë—Ç "${reminder.name}" –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}`);
    } else {
      // --- –ù–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç—á—ë—Ç–æ–≤, –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ ---
      const buttons = [ [ { text: reminder.name, callback_data: `report:${reminder.key}` } ] ];
      bot.sendMessage(chatId, "üîî –ü–æ—Å—Ç—É–ø–∏–ª–∏ –Ω–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:", {
        reply_markup: { inline_keyboard: buttons }
      });
      log(`–ù–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç—á—ë—Ç–æ–≤: –ø–µ—Ä–≤—ã–π "${reminder.name}" –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}`);
    }
  }
}

// --- –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
export function scheduleReminders(bot, chatId, pointName) {
  const point = POINTS[pointName];
  if (!point) return;

  const tz = TIMEZONE[point.tz];
  const pointType = point.type;

  REMINDERS.forEach(reminder => {
    if (reminder.pointType && reminder.pointType !== pointType) return;

    const cronKey = `${chatId}_${reminder.key}`;
    if (!userState[cronKey]) {
      userState[cronKey] = true;

      cron.schedule(reminder.cron, () => {
        const state = userState[chatId];
        if (!state || !state.verified) return;

        if (!state.pendingReminders) state.pendingReminders = [];

        // --- –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å, –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç ---
        if (!state.pendingReminders.includes(reminder.name)) {
          state.pendingReminders.push(reminder.name);
          log(`[CRON] –î–æ–±–∞–≤–ª–µ–Ω –æ—Ç—á—ë—Ç "${reminder.name}" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);

          // --- –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç—á—ë—Ç–∞, –≤—ã–¥–∞—ë–º —Å—Ä–∞–∑—É ---
          if (!state.lastReminder) {
            sendPendingReports(bot, chatId);
          }
        }
      }, { timezone: tz });
    }
  });
}
