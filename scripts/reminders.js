import cron from "node-cron";
import { REMINDERS, POINTS } from "../reports.js";
import { config } from "../config.js";
import { log } from "./logger.js";
import { userState } from "./state.js";

const { TIMEZONE } = config;

// –ù–µ–±–æ–ª—å—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
function declension(count) {
  if (count % 10 === 1 && count % 100 !== 11) return "–æ—Ç—á–µ—Ç";
  if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) return "–æ—Ç—á–µ—Ç–∞";
  return "–æ—Ç—á–µ—Ç–æ–≤";
}

export function sendPendingReports(bot, chatId) {
  const state = userState[chatId];
  if (!state || !state.pendingReminders || state.pendingReminders.length === 0) return;

  // –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
  state.pendingReminders = [...new Set(state.pendingReminders)];

  const count = state.pendingReminders.length;

  // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ç—á—ë—Ç ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –ø–µ—Ä–µ—Ç–∏—Ä–∞–µ–º, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞
  const buttons = state.pendingReminders
    .map((rName) => {
      const rem = REMINDERS.find((rem) => rem.name === rName);
      if (!rem) return null;
      return [{ text: rName, callback_data: `report:${rem.key}` }];
    })
    .filter(Boolean);

  if (state.lastReminder) {
    if (buttons.length > 0) {
      bot.sendMessage(
        chatId,
        `üîî –£ –≤–∞—Å –µ—â—ë ${count} –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö ${declension(count)}. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:`,
        { reply_markup: { inline_keyboard: buttons } }
      );
      log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId} –ø–æ–∫–∞–∑–∞–Ω —Å–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –æ—Ç—á—ë—Ç–æ–≤ (–∞–∫—Ç–∏–≤–Ω—ã–π —É–∂–µ –µ—Å—Ç—å).`);
    }
    return;
  }

  // –ê–≤—Ç–æ-–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –Ω–µ—Ç
  if (count === 1) {
    const reminder = REMINDERS.find((rem) => rem.name === state.pendingReminders[0]);
    if (reminder) {
      state.lastReminder = reminder.name;
      state.pendingReminders = state.pendingReminders.filter((r) => r !== reminder.name);
      bot.sendMessage(
        chatId,
        `üîî –ü–æ—Å—Ç—É–ø–∏–ª –æ—Ç—á–µ—Ç: "${reminder.name}". –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ ¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç—á–µ—Ç¬ª.`
      );
      log(`–û–¥–∏–Ω –æ—Ç—á—ë—Ç "${reminder.name}" —Å—Ä–∞–∑—É –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}`);
    }
    return;
  }

  // –ù–µ—Å–∫–æ–ª—å–∫–æ –∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –Ω–µ—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞
  if (buttons.length > 0) {
    bot.sendMessage(
      chatId,
      `üîî –ü–æ—Å—Ç—É–ø–∏–ª–∏ ${count} ${declension(count)}. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:`,
      { reply_markup: { inline_keyboard: buttons } }
    );
    log(`–ù–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç—á—ë—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}: ${state.pendingReminders.join(", ")}`);
  }
}

export function scheduleReminders(bot, chatId, pointName) {
  const tzKey = POINTS[pointName].tz;
  const tz = TIMEZONE[tzKey];
  const pointType = POINTS[pointName].type;

  REMINDERS.forEach((reminder) => {
    // –ï—Å–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —Ç–∏–ø–∞ —Ç–æ—á–∫–∏ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if (reminder.pointType && reminder.pointType !== pointType) return;

    cron.schedule(
      reminder.cron,
      () => {
        const state = userState[chatId];
        if (!state || !state.verified) return;

        if (!state.pendingReminders) state.pendingReminders = [];

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å, –Ω–æ –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º
        if (!state.pendingReminders.includes(reminder.name)) {
          state.pendingReminders.push(reminder.name);
        }

        // –ù–µ–±–æ–ª—å—à–∞—è "—Å–∫–ª–µ–π–∫–∞" —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤, —á—Ç–æ–±—ã –Ω–µ —Å–ª–∞—Ç—å –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥
        if (!state.reminderTimer) {
          state.reminderTimer = setTimeout(() => {
            try {
              sendPendingReports(bot, chatId);
            } finally {
              state.reminderTimer = null;
            }
          }, 300); // 300–º—Å —Ö–≤–∞—Ç–∞–µ—Ç, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å 1000–º—Å –µ—Å–ª–∏ –Ω—Ä–∞–≤–∏—Ç—Å—è
        }
      },
      { timezone: tz }
    );
  });
}
