import { REMINDERS, POINTS } from "../reports.js";
import { config } from "../config.js";
import { log } from "./logger.js";
import { userState } from "./state.js";
import cron from "node-cron";

const { TIMEZONE } = config;

export function sendPendingReports(bot, chatId) {
  const state = userState[chatId];
  if (!state || !state.pendingReminders || state.pendingReminders.length === 0) return;

  // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞, –≤—ã–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π
  if (!state.lastReminder) {
    if (state.pendingReminders.length === 1) {
      const reminder = REMINDERS.find(r => r.name === state.pendingReminders[0]);
      if (!reminder) return;

      state.lastReminder = reminder.name;
      state.pendingReminders = state.pendingReminders.filter(r => r !== reminder.name);

      // --- —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–µ–∑ –∫–Ω–æ–ø–æ–∫ –∏ "–Ω–∞–∂–º–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å" ---
      bot.sendMessage(chatId, `üîî –ü–æ—Å—Ç—É–ø–∏–ª –æ—Ç—á–µ—Ç: "${reminder.name}". –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç.`);
      log(`–û–¥–∏–Ω –æ—Ç—á—ë—Ç "${reminder.name}" –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}`);
    } else if (state.pendingReminders.length > 1) {
      const buttons = state.pendingReminders.map(r => {
        const rem = REMINDERS.find(rem => rem.name === r);
        if (!rem) return null;
        return [{ text: r, callback_data: `report:${rem.key}` }];
      }).filter(Boolean);

      if (buttons.length > 0) {
        bot.sendMessage(chatId, "üîî –ü–æ—Å—Ç—É–ø–∏–ª–∏ –Ω–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:", {
          reply_markup: { inline_keyboard: buttons }
        });
        log(`–ù–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç—á—ë—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}: ${state.pendingReminders.join(", ")}`);
      }
    }
  } else {
    // –£–∂–µ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç—á—ë—Ç, –Ω–æ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –≤ –æ—á–µ—Ä–µ–¥–∏
    if (state.pendingReminders.length > 0) {
      const buttons = state.pendingReminders.map(r => {
        const rem = REMINDERS.find(rem => rem.name === r);
        if (!rem) return null;
        return [{ text: r, callback_data: `report:${rem.key}` }];
      }).filter(Boolean);

      if (buttons.length > 0) {
        bot.sendMessage(chatId, "–ï—Å—Ç—å –Ω–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:", {
          reply_markup: { inline_keyboard: buttons }
        });
        log(`–î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –æ—Ç—á—ë—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}: ${state.pendingReminders.join(", ")}`);
      }
    }
  }
}

export function scheduleReminders(bot, chatId, pointName) {
  const point = POINTS[pointName];
  if (!point) return;

  const tz = TIMEZONE[point.tz];
  const pointType = point.type;

  REMINDERS.forEach(reminder => {
    if (reminder.pointType && reminder.pointType !== pointType) return;

    const cronKey = `${chatId}_${reminder.key}`;
    if (!userState[cronKey]) {
      userState[cronKey] = true;

      cron.schedule(reminder.cron, () => {
        const state = userState[chatId];
        if (!state || !state.verified) return;

        if (!state.pendingReminders) state.pendingReminders = [];

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ—Ç—á—ë—Ç –≤ –æ—á–µ—Ä–µ–¥—å, –¥–∞–∂–µ –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–Ω
        state.pendingReminders.push(reminder.name);
        log(`[CRON] –î–æ–±–∞–≤–ª–µ–Ω –æ—Ç—á—ë—Ç "${reminder.name}" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Å–µ—Ö pending –æ—Ç—á—ë—Ç–∞—Ö
        sendPendingReports(bot, chatId);
      }, { timezone: tz });
    }
  });
}
