import dotenv from "dotenv";
import { REMINDERS, POINTS } from "./reports.js";
import { userState } from "./scripts/state.js";
import { sendPendingReports } from "./scripts/reminders.js";
import { log } from "./scripts/logger.js";
import TelegramBot from "node-telegram-bot-api";

dotenv.config();

/**
 * === –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ===
 * 
 * 1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç "fridge_clean" –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:
 *    node trigger-report.js fridge_clean -all
 *
 * 2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç "fridge_clean" —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ—á–∫–∏ "—É–ª. –ù–∞–∑–∞—Ä–±–∞–µ–≤–∞ 52":
 *    node trigger-report.js fridge_clean --point "—É–ª. –ù–∞–∑–∞—Ä–±–∞–µ–≤–∞ 52"
 * 
 * –°–∫—Ä–∏–ø—Ç:
 * - –ù–∞–π–¥—ë—Ç –æ—Ç—á—ë—Ç –ø–æ –∫–ª—é—á—É (reportKey)
 * - –î–æ–±–∞–≤–∏—Ç –µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥—å pendingReminders –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
 * - –í—ã–∑–æ–≤–µ—Ç sendPendingReports() ‚Äî –±–æ—Ç —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
 */

const args = process.argv.slice(2);
const reportKey = args[0];
const allFlag = args.includes("-all");
const pointIndex = args.indexOf("--point");
const pointName = pointIndex > -1 ? args[pointIndex + 1] : null;

if (!reportKey) {
  console.error("‚ùå –£–∫–∞–∂–∏ –∫–ª—é—á –æ—Ç—á—ë—Ç–∞. –ü—Ä–∏–º–µ—Ä: node trigger-report.js fridge_clean");
  process.exit(1);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–∫–∏
if (pointName && !POINTS[pointName]) {
  console.error(`‚ùå –¢–æ—á–∫–∞ "${pointName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ—á–∫–∏:\n${Object.keys(POINTS).join("\n")}`);
  process.exit(1);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
const botToken = process.env.BOT_TOKEN;
if (!botToken) {
  console.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ .env");
  process.exit(1);
}

const bot = new TelegramBot(botToken, { polling: false });

// –ù–∞—Ö–æ–¥–∏–º –æ—Ç—á—ë—Ç –ø–æ –∫–ª—é—á—É
const reminder = REMINDERS.find(r => r.key === reportKey);
if (!reminder) {
  console.error(`‚ùå –û—Ç—á—ë—Ç —Å –∫–ª—é—á–æ–º "${reportKey}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ reports.js`);
  process.exit(1);
}

console.log(`üöÄ –§–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç: "${reminder.name}" (${reminder.key})`);

let sentCount = 0;

// –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
for (const [chatId, state] of Object.entries(userState)) {
  if (!state.verified) continue; // –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–º–µ–Ω—ã

  // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–æ—á–∫–µ
  if (!allFlag && pointName && state.point !== pointName) continue;

  if (!state.pendingReminders) state.pendingReminders = [];
  state.pendingReminders.push(reminder.name);

  sendPendingReports(bot, chatId);
  sentCount++;

  log(`[MANUAL_TRIGGER] –û—Ç—á—ë—Ç "${reminder.name}" –≤—Ä—É—á–Ω—É—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}`);
}

console.log(`‚úÖ –û—Ç—á—ë—Ç "${reminder.name}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å ${sentCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.`);
process.exit(0);
